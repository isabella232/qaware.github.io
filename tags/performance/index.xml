<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on QAware | Software Engineering Blog</title><link>https://qaware.github.io/tags/performance/</link><description>Recent content in Performance on QAware | Software Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2020, QAware GmbH; all rights reserved.</copyright><lastBuildDate>Wed, 15 Jun 2016 10:39:32 +0200</lastBuildDate><atom:link href="https://qaware.github.io/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Locking Alternatives in Java 8</title><link>https://qaware.github.io/posts/2016-06-15-locking-java-8/</link><pubDate>Wed, 15 Jun 2016 10:39:32 +0200</pubDate><guid>https://qaware.github.io/posts/2016-06-15-locking-java-8/</guid><description>Abstract To provide synchronized data cache access, I discuss three alternatives in Java 8: synchronized() blocks, ReadWriteLock and StampedLock (new in Java 8). I show code snippets and compare the performance impact on a real world application.
The Use Case Consider the following use case: A data cache that holds key-value pairs and needs to be accessed by several threads concurrently.
One option is to use a synchronized container like ConcurrentHashMap or Collections.</description></item></channel></rss>