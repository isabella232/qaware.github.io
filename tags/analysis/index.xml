<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Analysis on QAware | Software Engineering Blog</title><link>https://blog.qaware.de/tags/analysis/</link><description>Recent content in Analysis on QAware | Software Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2020, QAware GmbH; all rights reserved.</copyright><lastBuildDate>Tue, 22 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.qaware.de/tags/analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>SonarQube with JaCoCo in multi-module Maven project</title><link>https://blog.qaware.de/posts/2020-12-22-sonarqube-and-jacoco/</link><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.qaware.de/posts/2020-12-22-sonarqube-and-jacoco/</guid><description>This post explains in detail how to set up a SonarQube code analysis using the Sonar Maven Plugin including code coverage with the JaCoCo Maven plugin.
Although the setup is already documented within this SonarSource Community post, this post highlights pitfalls and enables you to adapt any Maven module structure such that it correctly measures and imports code coverage into your SonarQube analysis. This post focuses on using the official documentation from JaCoCo and Sonar.</description></item></channel></rss>