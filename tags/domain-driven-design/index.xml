<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Domain Driven Design on QAware | Software Engineering Blog</title><link>https://qaware.github.io/tags/domain-driven-design/</link><description>Recent content in Domain Driven Design on QAware | Software Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2020, QAware GmbH; all rights reserved.</copyright><lastBuildDate>Thu, 14 Jun 2018 15:06:32 +0200</lastBuildDate><atom:link href="https://qaware.github.io/tags/domain-driven-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Impressions from SEACON 2018 - Part 2</title><link>https://qaware.github.io/posts/2018-06-14-seacon-2/</link><pubDate>Thu, 14 Jun 2018 15:06:32 +0200</pubDate><guid>https://qaware.github.io/posts/2018-06-14-seacon-2/</guid><description>&amp;ldquo;Domain Driven Design&amp;rdquo; and &amp;ldquo;Taylorism&amp;rdquo; Henning Schwentner (wps solutions GmbH) presented the concepts behind Domain Driven Design (DDD, see sources123 for general references, and the slides of the talk4). The general idea behind DDD is to structure applications vertically rather than horizontally into domains: Design small, self-contained portions of an application domain rather than attempt to get (only?) the big picture. It doesn’t stop there, though: The domain-structure ought to be established, says Schwentner, not just in the design (aka.</description></item></channel></rss>