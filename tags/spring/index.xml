<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on QAware | Software Engineering Blog</title><link>https://blog.qaware.de/tags/spring/</link><description>Recent content in Spring on QAware | Software Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2020, QAware GmbH; all rights reserved.</copyright><lastBuildDate>Tue, 12 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.qaware.de/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Ways to decorate Spring beans</title><link>https://blog.qaware.de/posts/2021-01-12-spring-decorate-bean/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.qaware.de/posts/2021-01-12-spring-decorate-bean/</guid><description>In this blog post, we&amp;rsquo;ll look at various ways to decorate a Spring bean. The decorator pattern is a software engineering pattern &amp;ldquo;that allows behavior to be added to an individual object, dynamically, without affecting the behavior of other objects from the same class.&amp;quot;1
First, let&amp;rsquo;s create our interface:
1 2 3 public interface OurService { String doSomething(); } and one simple implementation:
1 2 3 4 5 6 public class OurServiceImpl implements OurService { @Override public String doSomething() { return &amp;#34;something&amp;#34;; } } Now, let&amp;rsquo;s create our decorator object which will decorate other OurService instances:</description></item><item><title>Generating OpenApi specification from Spring Boot</title><link>https://blog.qaware.de/posts/2020-12-16-openapi-for-spring-generator/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.qaware.de/posts/2020-12-16-openapi-for-spring-generator/</guid><description>An OpenAPI specification file is a document describing the (HTTP) API endpoints of your application. Based on the specification, you can generate clients directly interacting with your application for almost any programming languages. For example, this is convenient for frontend development using the application&amp;rsquo;s backend API.
You may know it also as &amp;ldquo;Swagger&amp;rdquo;, which is the former name for the OpenAPI specification version 2. It has now become an open initiative to promote well-documented application APIs everywhere.</description></item></channel></rss>