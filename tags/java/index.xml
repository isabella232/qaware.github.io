<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on QAware | Software Engineering Blog</title><link>https://blog.qaware.de/tags/java/</link><description>Recent content in Java on QAware | Software Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2020, QAware GmbH; all rights reserved.</copyright><lastBuildDate>Tue, 12 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.qaware.de/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Ways to decorate Spring beans</title><link>https://blog.qaware.de/posts/2021-01-12-spring-decorate-bean/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.qaware.de/posts/2021-01-12-spring-decorate-bean/</guid><description>In this blog post, we&amp;rsquo;ll look at various ways to decorate a Spring bean. The decorator pattern is a software engineering pattern &amp;ldquo;that allows behavior to be added to an individual object, dynamically, without affecting the behavior of other objects from the same class.&amp;quot;1
First, let&amp;rsquo;s create our interface:
1 2 3 public interface OurService { String doSomething(); } and one simple implementation:
1 2 3 4 5 6 public class OurServiceImpl implements OurService { @Override public String doSomething() { return &amp;#34;something&amp;#34;; } } Now, let&amp;rsquo;s create our decorator object which will decorate other OurService instances:</description></item><item><title>How to dispatch flux to worker in Reactor</title><link>https://blog.qaware.de/posts/2019-03-11-dispatch-flux-in-reactor/</link><pubDate>Mon, 11 Mar 2019 10:07:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2019-03-11-dispatch-flux-in-reactor/</guid><description>This post shows how to dispatch a flux of items to services of separated functional domains when using Reactor in Java. The author encountered this problem while developing a larger reactive application, where a strict separation of different domains of the application is key to maintain a clean architecture.
Reactor is a library for developing reactive applications and its reference guide is a good read to understand the basic principles of reactive programming.</description></item><item><title>JavaLand 2018</title><link>https://blog.qaware.de/posts/2018-04-27-javaland/</link><pubDate>Fri, 27 Apr 2018 15:06:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2018-04-27-javaland/</guid><description>JavaLand is a Java-focused conference which takes place in the theme park Phantasialand close to Cologne. Every year Java developers from all over the country visit exciting talks to expand their knowledge.
We were one of the exhibitors and presented our portable cloud showcase which lets you control OpenShift using a DJ pad. Besides, we held the talks A Hitchhiker&amp;rsquo;s Guide to Cloud Native Java EE and Docker und Kubernetes Patterns &amp;amp; Anti-Patterns and visited some others.</description></item><item><title>How to develop Eclipse SmartHome Bindings with IntelliJ and Docker</title><link>https://blog.qaware.de/posts/2017-09-20-eclipse-smart-home-bindings/</link><pubDate>Wed, 20 Sep 2017 15:06:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2017-09-20-eclipse-smart-home-bindings/</guid><description>Developing the Eclipse SmartHome (ESH) bindings with another IDE than Eclipse is difficult because the standard way of developing the bindings requires the tools provided by the Eclipse IDE. One can develop the ESH bindings with IntelliJ, however a crucial question remains open: how to test the developed bindings without having the Eclipse tools at hand? Using IntelliJ to develop the ESH bindings is different to using Eclipse for two main reasons:</description></item><item><title>Locking Alternatives in Java 8</title><link>https://blog.qaware.de/posts/2016-06-15-locking-java-8/</link><pubDate>Wed, 15 Jun 2016 10:39:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2016-06-15-locking-java-8/</guid><description>Abstract To provide synchronized data cache access, I discuss three alternatives in Java 8: synchronized() blocks, ReadWriteLock and StampedLock (new in Java 8). I show code snippets and compare the performance impact on a real world application.
The Use Case Consider the following use case: A data cache that holds key-value pairs and needs to be accessed by several threads concurrently.
One option is to use a synchronized container like ConcurrentHashMap or Collections.</description></item><item><title>WireSpock - Testing REST service client components with Spock and WireMock</title><link>https://blog.qaware.de/posts/2015-12-30-wirespock/</link><pubDate>Wed, 30 Dec 2015 10:39:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2015-12-30-wirespock/</guid><description>A short tutorial on how to use WireMock together with Spock.</description></item><item><title>Exploratory Open Source Software Testing with Spock</title><link>https://blog.qaware.de/posts/2015-08-31-spock-testing/</link><pubDate>Mon, 31 Aug 2015 10:39:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2015-08-31-spock-testing/</guid><description>Exploratory software testing is a technique every agile developer should know about. It&amp;rsquo;s about test driving your application without a predetermined course of action. Although this seems like random free style testing, in the hands of an experienced developer this proves to be a powerful technique to find bugs and undesired behaviour.
But in this article I will talk about exploratory software testing of open source software components, libraries or whole frameworks.</description></item><item><title>GUI Tests for JavaFX</title><link>https://blog.qaware.de/posts/2015-04-16-java-fx-testing/</link><pubDate>Thu, 16 Apr 2015 10:39:32 +0200</pubDate><guid>https://blog.qaware.de/posts/2015-04-16-java-fx-testing/</guid><description>This article summarizes my experiences when setting up UI tests for a new JavaFX application at QAware.
I had the following requirements for a JavaFX test framework:
Free (as in beer) Software with a permissive license Lean, pure Java framework Integration with JUnit Later on, the requirement to do headless tests was added. I will cover headless tests in a follow-up post.
A quick search reveals three contenders:</description></item></channel></rss>